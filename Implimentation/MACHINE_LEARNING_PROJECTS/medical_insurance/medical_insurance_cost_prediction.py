# -*- coding: utf-8 -*-
"""Medical Insurance Cost Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V6t9jU2m42IaeOjsuWFHripCCSX193o8
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import metrics

df=pd.read_csv('/content/insurance.csv')

df.head()

df.shape

df.info()

df.describe()

sns.set()
plt.figure(figsize=(6,6))
sns.displot(df['age'])
plt.title('Age Distribution')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x='sex',data=df)
plt.title('Sex Distribution')
plt.show()

plt.figure(figsize=(6,6))
sns.displot(df['bmi'])
plt.title('bmi distribution')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x='children',data=df)
plt.title('Children Distribution')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x='smoker',data=df)
plt.title('Smoker Distribution')
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x='region',data=df)
plt.title('Region Distribution')
plt.show()

plt.figure(figsize=(6,6))
sns.displot(df['charges'])
plt.title('charges Distribution')
plt.show()

df.replace({'sex':{'male':0,'female':1}},inplace=True)
df.replace({'smoker':{'yes':0,'no':1}},inplace=True)
df.replace({'region':{'southeast':0,'southwest':1,'northeast':2,'northwest':3}},inplace=True)

df.head()

x=df.drop(columns='charges',axis=1)
y=df['charges']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=2)

# Use a regression model like Linear Regression
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(x_train, y_train)

training_data_prediction = model.predict(x_train)

r2_train = metrics.r2_score(y_train, training_data_prediction)

# Make prediction on the test set
test_data_prediction = model.predict(x_test)

r2_test = metrics.r2_score(y_test, test_data_prediction)
print('R Squared value = ', r2_train)
print('R Squared value = ', r2_test)

input_data = (31,1,25.74,0,1,0)

numarray=np.asarray(input_data)
input_reshape=numarray.reshape(1,-1)

predict=model.predict(input_reshape)
print('the insurance cost is USD ', predict)