# -*- coding: utf-8 -*-
"""rockv/smine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GnsClFPlGphNUOMMxClL7x3UKbdh-Xb5
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
#loading the dataset to a pandas dataset
sonar_data=pd.read_csv('/content/Copy of sonar data.csv',header=None)

sonar_data.head()

sonar_data.shape
sonar_data.describe()# gives the count of instances give the mean and standard deviation
#describe statistical measures of the data

sonar_data[60].value_counts()# give the count of rocks and mine must be almost same no.
# more the data more accurate the model

sonar_data.groupby(60).mean()
# we get the mean value of rock and mine

# we need to separate the labels from the data
x=sonar_data.drop(columns=60,axis=1)
y=sonar_data[60]
print(x)
print(y)

#training and test data
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,stratify=y,random_state=1)

print(x.shape,x_train.shape,x_test.shape)

#MODEL TRAINING
#BY LOGISTIC REGRESSION MODEL
model=LogisticRegression()

#TRAINING THE LOGISTIC REGRESSION MODEL WITH THE TRAINING DATA
model.fit(x_train,y_train)

#MODEL EVALUATION
#ACCURACY ON THE TRAINING DATA
x_train_prediction=model.predict(x_train)
training_data_accuracy=accuracy_score(x_train_prediction,y_train)
print('accuracy:',training_data_accuracy)

#accuracy on test data
x_test_prediction=model.predict(x_test)
test_data_accuracy=accuracy_score(x_test_prediction,y_test)
print('accuracy:',test_data_accuracy)

#making a predictive system
input_data=(0.0286,0.0453,0.0277,0.0174,0.0384,0.0990,0.1201,0.1833,0.2105,0.3039,0.2988,0.4250,0.6343,0.8198,1.0000,0.9988,0.9508,0.9025,0.7234,0.5122,0.2074,0.3985,0.5890,0.2872,0.2043,0.5782,0.5389,0.3750,0.3411,0.5067,0.5580,0.4778,0.3299,0.2198,0.1407,0.2856,0.3807,0.4158,0.4054,0.3296,0.2707,0.2650,0.0723,0.1238,0.1192,0.1089,0.0623,0.0494,0.0264,0.0081,0.0104,0.0045,0.0014,0.0038,0.0013,0.0089,0.0057,0.0027,0.0051,0.0062)
#changing the input data to a numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshape the np array as we are predicting for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]=='R'):
  print('the object is a rock')
else:
  print('the object is a mine')