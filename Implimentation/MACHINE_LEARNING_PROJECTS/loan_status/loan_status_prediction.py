# -*- coding: utf-8 -*-
"""Loan Status Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SOPZxhLTCwMCwCp9ii5M7RDOr0_GCC6y
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

loan_dataset=pd.read_csv('/content/train_u6lujuX_CVtuZ9i (1).csv')
type(loan_dataset)

loan_dataset.head()

#numbers of rows and column
loan_dataset.shape

#statistical data
loan_dataset.describe()

#no.of missing values of the dataset
loan_dataset.isnull().sum()

#droping thee missing values
loan_dataset=loan_dataset.dropna()
loan_dataset.isnull().sum()

loan_dataset.shape

#label encoding
loan_dataset.replace({"Loan_Status":{'N':0,'Y':1}},inplace=True)

#print 5 cloumn
loan_dataset.head()

#dependent column values
loan_dataset['Dependents'].value_counts()

#replacing the values of 3+ to 4
loan_dataset=loan_dataset.replace(to_replace='3+',value=4)

loan_dataset['Dependents'].value_counts()

#education and loan status
sns.countplot(x='Education',hue='Loan_Status',data=loan_dataset)

#matrital status
sns.countplot(x='Married',hue='Loan_Status',data=loan_dataset)

# convert the catogorical columns to numerical values
loan_dataset.replace({'Married':{'No':0,'Yes':1},'Gender':{'Male':1,'Female':0},'Self_Employed':{'No':0,'Yes':1},'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2},'Education':{'Graduate':1,'Not Graduate':0}},inplace=True)

loan_dataset.head()

#seprating the lables and data
X=loan_dataset.drop(columns=['Loan_ID','Loan_Status'],axis=1)
Y=loan_dataset['Loan_Status']

print(X)
print(Y)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

classifier=svm.SVC(kernel='linear')
#training the model
classifier.fit(X_train,Y_train)

#model evaluation
#accuracy score on training data
X_train_prediction=classifier.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)
print('Accuracy on training data : ',training_data_accuracy)

X_test_prediction=classifier.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)
print('Accuracy on test data : ',test_data_accuracy)