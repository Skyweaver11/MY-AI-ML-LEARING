# -*- coding: utf-8 -*-
"""Building Support Vector Machine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BIoVcuOo22MzsfPo9Iwe3SAlI053ezQR
"""

import numpy as np

class svm_classifier():

  def __init__(self,alpha,iteration,lambda_p):
    self.alpha=alpha
    self.iteration=iteration
    self.lambda_p=lambda_p

  def fit(self,x,y):
    self.m,self.n=x.shape
    self.w=np.zeros(self.n)
    self.b=0
    self.x=x
    self.y=y
    for i in range(self.iteration):
      self.update_weight()

  def update_weight(self):
    y_lable=np.where(self.y<=0,-1,1)
    for index,x_i in enumerate(self.x):#enumerate is like a counter for index and the other one is the value
      condition=y_lable[index]*(np.dot(x_i,self.w)-self.b)>=1
      if(condition==True):
        dw=2*self.lambda_p*self.w
        db=0
      else:
        dw=2*self.lambda_p*self.w-np.dot(x_i,y_lable[index])
        db=y_lable[index]
      self.w=self.w-self.alpha*dw
      self.b=self.b-self.alpha*db


  def predict(self,x):
    output=np.dot(self.w,x.T)+self.b
    predict=np.sign(output)
    y_hat=np.where(predict==-1,0,1)
    return y_hat

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler

dataset=pd.read_csv('/content/diabetes.csv')
dataset.head()

dataset.shape

features=dataset.drop(columns='Outcome',axis=1)
target=dataset['Outcome']

standard=StandardScaler()
standard.fit(features)

standardized_data=standard.transform(features)

print(standardized_data)

features=standardized_data
target=dataset['Outcome']

x_train,x_test,y_train,y_test=train_test_split(features,target,test_size=0.2,random_state=2)

print(features.shape,x_train.shape,x_test.shape)

model=svm_classifier(alpha=0.001,iteration=1000,lambda_p=0.01)

model.fit(x_train,y_train)

x_train_predict=model.predict(x_train)
print(accuracy_score(y_train,x_train_predict))

x_test_predict=model.predict(x_test)
print(accuracy_score(y_test,x_test_predict))

